name: GitHub Actions CI
run-name: ${{ github.actor }} is CI out GitHub Actions 🚀
on: [push]
jobs:
  # 只需要定义一个job并命名为CI
  Continuous-Integration:
    runs-on: ubuntu-latest
    steps:

      - name: Check out repository code（拉取项目代码）
        uses: actions/checkout@v4

      - name: Setup node（当前环境下载node）
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"
          registry-url: https://registry.npmjs.com/

      - name: Check Cache（检查缓存）
        # 如果key命中缓存则直接将缓存的文件还原到 path 目录，从而减少流水线运行时间
        # 若 key 没命中缓存时，在当前Job成功完成时将自动创建一个新缓存
        # 缓存命中结果会存储在steps.[id].outputs.cache-hit里，该变量在继后的step中可读
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          # 缓存文件目录的路径
          path: |
            **/node_modules
          # key中定义缓存标志位的生成方式。runner.OS指当前环境的系统。外加对yarn.lock内容生成哈希码作为key值，如果yarn.lock改变则代表依赖有变化。
          # 这里用yarn.lock而不是package.json是因为package.json中还有version和description之类的描述项目但和依赖无关的属性
          key: ${{runner.OS}}-${{hashFiles('**/yarn.lock')}}

      - name: Installing Dependencies（安装依赖）
        # 如果缓存标志位没命中，则执行该step。否则就跳过该step
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: npm run bootstrap

      - name: Running Test（运行自动化测试）
        # 通过前面章节定义的命令行执行自动化测试
        run: npm run test

        - name: Run the tests and generate coverage report（生成代码覆盖率报告）
        run: |
          npm run codecov

      - name: Upload coverage reports to Codecov（上传代码覆盖率报告）
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
